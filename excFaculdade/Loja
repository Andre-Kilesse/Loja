import java.util.Scanner;

public class Loja {
    Vitrine vitrine;
    CarrinhoDeCompra carrinhoDeCompra;

    public Loja() {
        vitrine = new Vitrine();
        carrinhoDeCompra = new CarrinhoDeCompra();
    }

    public void verVitrine() {
        System.out.println("Vitrine:");
        for (Item item : vitrine.itens) {
            System.out.println("Código: " + item.codigo + ", Nome: " + item.nome + ", Valor: " + item.valor);
        }
        System.out.println();
    }

    public void verCarrinhoDeCompra() {
        System.out.println("Carrinho de Compra:");
        for (ItemDoCarrinho itemDoCarrinho : carrinhoDeCompra.itensDoCarrinho) {
            System.out.println("Código: " + itemDoCarrinho.item.codigo + ", Nome: " + itemDoCarrinho.item.nome
                    + ", Valor: " + itemDoCarrinho.item.valor + ", Quantidade: " + itemDoCarrinho.quantidade);
        }
        System.out.println();
    }

    public void comprarItem(int codigo, int quantidade) {
        // Verifica se o código do produto está na vitrine
        Item produtoEscolhido = null;
        for (Item item : vitrine.itens) {
            if (item.codigo == codigo) {
                produtoEscolhido = item;
                break;
            }
        }

        // Se o produto foi encontrado, adiciona ao carrinho
        if (produtoEscolhido != null) {
            ItemDoCarrinho itemDoCarrinho = new ItemDoCarrinho(produtoEscolhido, quantidade);
            carrinhoDeCompra.adicionarItem(itemDoCarrinho);
            System.out.println("Item adicionado ao carrinho.");
        } else {
            System.out.println("Produto não encontrado na vitrine.");
        }
    }

    public void realizarPagamento() {
        // Verifica se há itens no carrinho
        if (carrinhoDeCompra.itensDoCarrinho.isEmpty()) {
            System.out.println("Carrinho vazio. Nada a pagar.");
            return;
        }

        // Calcula o total da compra
        double totalCompra = 0;
        for (ItemDoCarrinho itemDoCarrinho : carrinhoDeCompra.itensDoCarrinho) {
            totalCompra += itemDoCarrinho.item.valor * itemDoCarrinho.quantidade;
        }

        // Aplica desconto de 10% se o pagamento for à vista
        double totalComDesconto = totalCompra;
        Scanner scanner = new Scanner(System.in);
        System.out.println("Deseja pagar à vista? (S/N): ");
        String opcaoPagamento = scanner.next();

        if (opcaoPagamento.equalsIgnoreCase("S")) {
            totalComDesconto *= 0.9; // Aplica desconto de 10%
            System.out.println("Desconto de 10% aplicado.");
        }

        System.out.println("Total da compra: R$" + totalCompra);
        System.out.println("Total com desconto: R$" + totalComDesconto);
        System.out.println("Escolha a forma de pagamento:");
        System.out.println("1. PIX");
        System.out.println("2. TED");
        System.out.println("3. Cartão de Crédito");

        int opcaoFormaPagamento = scanner.nextInt();

        switch (opcaoFormaPagamento) {
            case 1:
                System.out.println("Pagamento realizado via PIX. Obrigado!");
                break;
            case 2:
                System.out.println("Pagamento realizado via TED. Obrigado!");
                break;
            case 3:
                System.out.println("Pagamento realizado via Cartão de Crédito. Obrigado!");
                break;
            default:
                System.out.println("Opção de pagamento inválida.");
        }

        // Limpa o carrinho após o pagamento
        carrinhoDeCompra.itensDoCarrinho.clear();
    }

    public void cadastrarNovoItem(Item novoItem) {
        vitrine.adicionarItem(novoItem);
        System.out.println("Novo produto cadastrado com sucesso.");
    }

    public void atualizarPrecoItem(int codigo, double novoPreco) {
        // Implementação do método atualizarPrecoItem
    }

    public void removerItem(int codigo) {
        for (Item item : vitrine.itens) {
            if (item.codigo == codigo) {
                vitrine.itens.remove(item);
                System.out.println("Produto removido com sucesso.");
                return;
            }
        }
        System.out.println("Produto não encontrado na vitrine.");
    }

    public static void main(String[] args) {
        Loja loja = new Loja();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Menu Principal:");
            System.out.println("1. Ver Vitrine");
            System.out.println("2. Ver Carrinho de Compra");
            System.out.println("3. Comprar Item");
            System.out.println("4. Realizar Pagamento");
            System.out.println("5. Acessar Opções do Administrador");
            System.out.println("0. Sair");

            int opcao = scanner.nextInt();

            switch (opcao) {
                case 1:
                    loja.verVitrine();
                    break;
                case 2:
                    loja.verCarrinhoDeCompra();
                    break;
                case 3:
                    System.out.println("Informe o código do produto: ");
                    int codigoCompra = scanner.nextInt();
                    System.out.println("Informe a quantidade: ");
                    int quantidadeCompra = scanner.nextInt();
                    loja.comprarItem(codigoCompra, quantidadeCompra);
                    break;
                case 4:
                    loja.realizarPagamento();
                    break;
                case 5:
                    // Implementação das opções do administrador
                    break;
                case 0:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        }
    }
}
